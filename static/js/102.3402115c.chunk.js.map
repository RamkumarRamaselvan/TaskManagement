{"version":3,"file":"static/js/102.3402115c.chunk.js","mappings":"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","sources":["app/helper.js","app/mockData.js","pages/register.js"],"sourcesContent":["export const getDate = () => {\r\n    const currentDate = new Date();\r\n    const day = String(currentDate.getDate()).padStart(2, \"0\");\r\n    const month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\r\n    const year = currentDate.getFullYear();\r\n\r\n    const hours = String(currentDate.getHours()).padStart(2, \"0\");\r\n    const minutes = String(currentDate.getMinutes()).padStart(2, \"0\");\r\n    const seconds = String(currentDate.getSeconds()).padStart(2, \"0\");\r\n    const formattedDateTime = `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\r\n\r\n    return formattedDateTime;\r\n\r\n}\r\nexport const allowNumericOnly = (e) => {\r\n    const code = \"charCode\" in e ? e.charCode : e.keyCode;\r\n    if (!(code >= 48 && code <= 57)) {\r\n      e.preventDefault();\r\n    }\r\n}","export const statusOption = [\r\n    {\r\n        \"label\": \"Pending\",\r\n        \"value\": \"Pending\"\r\n    },\r\n    {\r\n        \"label\": \"In Progress\",\r\n        \"value\": \"In Progress\"\r\n    },\r\n    {\r\n        \"label\": \"Completed\",\r\n        \"value\": \"Completed\"\r\n    }\r\n]\r\nexport const registerInput = [\r\n    {\r\n        name:\"firstName\",\r\n        lable:\"First Name\",\r\n        type:\"text\",\r\n    },\r\n    {\r\n        name:\"lastName\",\r\n        lable:\"Last Name\",\r\n        type:\"text\",\r\n    },\r\n    {\r\n        name:\"username\",\r\n        lable:\"Username\",\r\n        type:\"text\",\r\n    },\r\n    {\r\n        name:\"password\",\r\n        lable:\"Password\",\r\n        type:\"password\",\r\n    },\r\n    {\r\n        name:\"email\",\r\n        lable:\"Email\",\r\n        type:\"text\",\r\n    },\r\n    {\r\n        name:\"mobile\",\r\n        lable:\"Mobile Number\",\r\n        type:\"tel\",\r\n    }\r\n]\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport Input from \"../Component/input.js\";\r\nimport { registerInput} from \"../app/mockData.js\";\r\nimport { allowNumericOnly } from '../app/helper.js'; \r\nimport { useNavigate } from 'react-router-dom';\r\nconst RegisterPage = () => {\r\n  const packageJson = require('../../package.json');\r\n  const proxy = packageJson.proxy;\r\n  const [formData, setFormData] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    username: '',\r\n    password: '',\r\n    email: '',\r\n    mobile: '',\r\n  });\r\n  const [error, setError] = useState({\r\n    firstName: { error: false, msg: \"\" },\r\n    lastName: { error: false, msg: \"\" },\r\n    username: { error: false, msg: \"\" },\r\n    password: { error: false, msg: \"\" },\r\n    email: { error: false, msg: \"\" },\r\n    mobile: { error: false, msg: \"\" },\r\n  });\r\n  const { username } = JSON.parse(localStorage.getItem(\"userDetails\")) || {};\r\n  const [userData,setUserData] = useState([]);\r\n  const navigate = useNavigate();\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n    setError((error) => ({\r\n      ...error,\r\n      [name]: { error: false, msg: \"\" },\r\n    }));\r\n  };\r\n  useEffect(()=>{\r\n    getUserDetails();\r\n  },[]);\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n  const validate = () => {\r\n    let valid = true;\r\n    let newErrors = {};\r\n\r\n    const setFieldError = (field, msg) => {\r\n      newErrors[field] = { error: true, msg };\r\n    };\r\n\r\n    if (formData.firstName.trim() === \"\") {\r\n      setFieldError(\"firstName\", \"Please Enter Your First Name.\");\r\n      valid = false;\r\n    }\r\n    if (formData.lastName.trim() === \"\") {\r\n      setFieldError(\"lastName\", \"Please Enter Your Last Name.\");\r\n      valid = false;\r\n    }\r\n    if (formData.username.trim() === \"\") {\r\n      setFieldError(\"username\", \"Please Enter Your Username.\");\r\n      valid = false;\r\n    }\r\n    if (userData?.some((data) => data.username === formData.username)) {\r\n      setFieldError(\"username\", \"Username is already Exist.\");\r\n      valid = false;\r\n    }\r\n    if (formData.password.trim() === \"\") {\r\n      setFieldError(\"password\", \"Please Enter Your Password.\");\r\n      valid = false;\r\n    }\r\n    if (formData.email.trim() === \"\") {\r\n      setFieldError(\"email\", \"Please Enter Your Email.\");\r\n      valid = false;\r\n    } else if (!emailRegex.test(formData.email.trim())) {\r\n      setFieldError(\"email\", \"Please Enter Valid Email.\");\r\n      valid = false;\r\n    }\r\n    if (formData.mobile.trim() === \"\") {\r\n      setFieldError(\"mobile\", \"Please Enter Your Mobile Number.\");\r\n      valid = false;\r\n    } else if (!/^\\d{10}$/.test(formData.mobile)) {\r\n      setFieldError(\"mobile\", \"Please Enter a valid Mobile Number.\");\r\n      valid = false;\r\n    }\r\n\r\n    setError((error) => ({ ...error, ...newErrors }));\r\n    return valid;\r\n  };\r\n\r\n  const getUserDetails = async () => {\r\n    try {\r\n      const response = await fetch(`${proxy}/users`);\r\n\r\n      if (!response.ok) throw new Error(\"Invalid credentials\");\r\n      const data = await response.json();\r\n      localStorage.setItem(\"registerUser\",JSON.stringify(data));\r\n      setUserData(data);\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const valid = validate();\r\n    if (valid) {\r\n      try {\r\n        const response = await fetch(`${proxy}/users`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(formData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n\r\n        alert(\"Registration successful!\");\r\n        if (!username) {\r\n          navigate(\"/\");\r\n        }else{\r\n          navigate(\"/profile\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"An error occurred while registering.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='wrapper'>\r\n      <div className='register_container'>\r\n        <div className='profileCard'>\r\n          <h2>Register</h2>\r\n\r\n          <form>\r\n            <div className='row'>\r\n              {registerInput?.map((input) => {\r\n                return (\r\n                  <Input\r\n                    type={input.type}\r\n                    name={input.name}\r\n                    label={input.lable}\r\n                    value={formData[input.name]}\r\n                    onChange={handleChange}\r\n                    placeholder={\"Enter your \" + input.lable}\r\n                    coverClassName=\"col-md-6\"\r\n                    error={error[input.name].error}\r\n                    errorMessage={error[input.name].msg}\r\n                    onKeyPress={(e) => input.type == \"tel\" && allowNumericOnly(e)}\r\n                    maxLength={input.type == \"tel\" ? 10 : 50}\r\n                  // disabled={page ? false : isEdit ? false : true}\r\n                  />\r\n                )\r\n              })}\r\n            </div>\r\n            <div className=\"btn_Cover\">\r\n              {!username && (\r\n                <button className='login_btn btn btn-primary'><a href='/'>Back</a></button>\r\n              )}\r\n              <button type=\"submit\" className='login_btn btn btn-primary' onClick={handleSubmit}>\r\n                Register\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default RegisterPage;\r\n"],"names":["getDate","currentDate","Date","day","String","padStart","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","concat","allowNumericOnly","e","code","charCode","keyCode","preventDefault","statusOption","registerInput","name","lable","type","RegisterPage","proxy","require","formData","setFormData","useState","firstName","lastName","username","password","email","mobile","error","setError","msg","JSON","parse","localStorage","getItem","userData","setUserData","navigate","useNavigate","handleChange","value","target","_objectSpread","useEffect","getUserDetails","emailRegex","async","response","fetch","ok","Error","data","json","setItem","stringify","console","log","_jsx","className","children","_jsxs","map","input","Input","label","onChange","placeholder","coverClassName","errorMessage","onKeyPress","maxLength","href","onClick","valid","validate","newErrors","setFieldError","field","trim","some","test","method","headers","body","alert"],"sourceRoot":""}